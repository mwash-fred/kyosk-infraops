plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
}

group = 'app.kyosk'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.mockito:mockito-core:5.15.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

test{
	finalizedBy jacocoTestReport
}

def testCoverageExcludes = [
		"**/InfraopsApplication.java",
		"**/test/**"
]

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	classDirectories.setFrom(
			sourceSets.main.output.classesDirs.asFileTree.matching {
				exclude(testCoverageExcludes)
			}
	)
}

def sonarExclusions = [
		"**/app/kyosk/infraops/InfraopsApplication.java"
]

sonar {
	properties {
		property "sonar.projectKey", "Kyosk-Infraops"
		property "sonar.projectName", "kyosk Infraops Interview"
		property "sonar.projectVersion", "1.0"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_c8aba200a97315798f92fd88f3143ab14c4655e5"
		property "sonar.coverage.exclusions", sonarExclusions.join(",")
	}
}
